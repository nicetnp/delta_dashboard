from fastapi import APIRouter, WebSocket, WebSocketDisconnect
from services.failure_today_service import fetch_failures_today
from schemas.failure_schema import FailureSelectStation, FailureByDay  # ‡πÄ‡∏û‡∏¥‡πà‡∏° FailureByDay
from fastapi.encoders import jsonable_encoder
from db.session import SessionLocal
from db.redis_client import r as redis_client
import asyncio
import json

router = APIRouter(prefix="/failures", tags=["Failures"])


@router.websocket("/ws/today")
async def failure_today_ws(websocket: WebSocket):
    await websocket.accept()
    print("‚úÖ WebSocket connected")

    line_id = websocket.query_params.get("lineId", "B3")
    print(f"‚ÑπÔ∏è lineId: {line_id}")

    # üëá ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á lineId ‡πÑ‡∏õ‡πÉ‡∏´‡πâ service
    failure_query_data = FailureSelectStation(lineId=line_id)

    db = SessionLocal()
    try:
        while True:
            cache_key = f"failures_today_{line_id}"
            cached_data = redis_client.get(cache_key)

            if cached_data:
                print(f"üì¶ ‡πÉ‡∏ä‡πâ cache: {cache_key}")
                serialized_data = json.loads(cached_data)
            else:
                print(f"üóÉÔ∏è ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å DB lineId={line_id}")
                # ‡∏™‡πà‡∏á failure_query_data ‡∏ó‡∏µ‡πà‡∏°‡∏µ lineId ‡πÑ‡∏õ‡πÉ‡∏´‡πâ service
                raw_data = fetch_failures_today(failure_query_data, db)

                # üëá ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ: ‡πÉ‡∏ä‡πâ FailureByDay ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ validate/dump
                serialized_data = [
                    FailureByDay.model_validate(row).model_dump()
                    for row in raw_data
                ]
                redis_safe_data = jsonable_encoder(serialized_data)
                redis_client.setex(cache_key, 15, json.dumps(redis_safe_data))
                print(f"‚úÖ cache ‡πÉ‡∏´‡∏°‡πà: {cache_key}")

            await websocket.send_json(jsonable_encoder(serialized_data))
            await asyncio.sleep(5)

    except WebSocketDisconnect:
        print("‚ùå WebSocket client disconnected")

    except Exception as e:
        print(f"‚ùó Unexpected error: {e}")

    finally:
        db.close()
        print("üîí Database session closed")